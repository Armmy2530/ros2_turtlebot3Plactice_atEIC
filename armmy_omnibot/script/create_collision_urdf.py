from datetime import datetime
import yaml
import math
import os

# Constants
CONFIG_FILE_PATH = "wheel_config/omni_wheel_config.yaml"
OUTPUT_FILE_PATH = "output.txt"
MAX_CHAR_WIDTH = 56
MAX_DECIMAL_POINT = 4


def print_content_break():
    return "_" * MAX_CHAR_WIDTH + "\n"


def open_config_file(input_path=CONFIG_FILE_PATH):
    """Load wheel config from YAML file."""
    with open(input_path, 'r') as f:
        config = yaml.safe_load(f)
    return config


def compute_roller_positions(config):
    """Compute 3D position and orientation for each roller."""
    data = []
    for theta, offset, axel in config['position']:
        amp = config['wheel_radius'] - config['tangent_radius']
        x = amp * math.cos(math.radians(theta))
        y = offset
        z = amp * math.sin(math.radians(theta))
        x, y, z = round(x, MAX_DECIMAL_POINT), round(y, MAX_DECIMAL_POINT), round(z, MAX_DECIMAL_POINT)
        data.append([[x, y, z], axel])
    return data


def generate_metadata(config):
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    lines = [
        f"** This is autogenerated for set collision of omniwheel",
        f"** data: {now}",
        f"** config: {CONFIG_FILE_PATH}",
        print_content_break()
    ]
    return lines


def generate_config_dump(config):
    lines = [
        "___________________ Config Data __________________________\n",
        f"wheel_radius: {config['wheel_radius']}",
        f"tangent_radius: {config['tangent_radius']}",
        f"roller_count: {config['roller_count']}",
        "position:"
    ]
    for pos in config["position"]:
        lines.append(f"- {pos}")
    lines.append("")
    lines.append(print_content_break())
    return lines


def generate_position_orientation_section(roller_data):
    lines = [
        "*_______________________ Sphere position and orientation _______________________*",
        "* roller id | pos (x, y, z)                   | axis (x, y, z)                  *",
    ]
    for i, (pos, ori) in enumerate(roller_data):
        pos_str = ", ".join(f"{p:9.6f}" for p in pos)  # Fixed width float formatting
        ori_str = ", ".join(f"{o:9.6f}" for o in ori)
        lines.append(f"* {i+1:<9} | {pos_str:<30} | {ori_str:<30} *")  # Adjust widths for consistent alignment
    lines.append("*" + "_"*79 + "*\n")  # Adjust length to match the new width
    return lines


def generate_urdf_block(config, roller_data):
    lines = [
        "______________________ URDF Format ______________________",
        "_______________ Add this to wheel urdf __________________\n"
    ]
    for i in range(config["roller_count"]):
        pos = " ".join(map(str, roller_data[i][0]))
        rpy = " ".join(map(str, roller_data[i][1]))
        lines.append(f"""<xacro:roller prefix="${{prefix}}" num="{i+1}">
    <origin xyz="{pos}" rpy="0.0 0.0 0.0" />
    <axis xyz="{rpy}" />
</xacro:roller>""")
    lines.append("\n")
    lines.append(print_content_break())
    return lines


def generate_roller_macro(config):
    roller_weight = config['roller_weight']
    tangent_radius = config['tangent_radius']
    lines = [
        "__________________ Create roller urdf __________________",
        f'<xacro:property name="roller_mass" value="{roller_weight}" />',
        f'<xacro:property name="roller_radius" value="{tangent_radius}" />',
        """<xacro:macro name="roller" params="prefix num *joint_origin *joint_axis">		
    <link name="roller_${prefix}_${num}_link">
        <xacro:inertial_sphere mass="${roller_mass}" radius="${roller_radius}">
            <origin xyz="0 0 0" rpy="0 0 0" />
        </xacro:inertial_sphere>
        <collision>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <geometry>
                <sphere radius="${roller_radius}" />
            </geometry>
        </collision>
    </link>
    <joint name="roller_${prefix}_${num}_joint" type="continuous">
        <xacro:insert_block name="joint_origin" />
        <parent link="${prefix}_wheel_link" />
        <child link="roller_${prefix}_${num}_link" />
        <xacro:insert_block name="joint_axis" />
    </joint>
</xacro:macro>""",
        print_content_break()
    ]
    return lines


def assemble_file_content(config):
    roller_data = compute_roller_positions(config)
    content = []
    content += generate_metadata(config)
    content += generate_config_dump(config)
    content += generate_position_orientation_section(roller_data)
    content += generate_urdf_block(config, roller_data)
    content += generate_roller_macro(config)
    return content


def save_file(output_path, content):
    with open(output_path, "w") as f:
        f.write("\n".join(content))


def main():
    config = open_config_file()
    content = assemble_file_content(config)
    save_file(OUTPUT_FILE_PATH, content)


if __name__ == '__main__':
    main()
